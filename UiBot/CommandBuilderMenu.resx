<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>
To use commands, either type the command function along with the appropriate modifiers, or use the buttons to quickly add the functions. If you are using the buttons make sure you have something set in the text fields beside the buttons. For example, HoldKey=F(1000). You can separate multiple functions with a comma (,) or a space. Commands can be chained together to run in series. For complex operations that require simultaneous execution, use the asynchronous (Async) commands. For instance, HoldKeyAsync=K(1000) TurnMouseAsync=L(1000, 20) will hold the K button and turn the mouse at the same time. Key codes available below the Commands

Commands:
HoldKey=KEY(Duration)
Holds the specified key for the duration in milliseconds.

HoldKeyAsync=KEY(Duration)
Asynchronously holds the specified key for the duration in milliseconds.

HitKey=KEY
Presses the specified key once.

HitKeyAsync=KEY
Asynchronously presses the specified key once.

TurnMouse=Direction(Duration,Speed)
Moves the mouse in the specified direction for the given duration and speed. Directions: U (Up), D (Down), L (Left), R (Right), RAND(Right or Left).

TurnMouseAsync=Direction(Duration,Speed)
Asynchronously moves the mouse in the specified direction for the given duration and speed. Directions: U (Up), D (Down), L (Left), R (Right), RAND(Right or Left).

LeftClick
Performs a left mouse button click.

LeftClickAsync
Asynchronously performs a left mouse button click.

LeftClickHold=Duration
Performs a left mouse button click and holds it for the specified duration in milliseconds.

LeftClickHoldAsync=Duration
Asynchronously performs a left mouse button click and holds it for the specified duration in milliseconds.

RightClick
Performs a right mouse button click.

RightClickAsync
Asynchronously performs a right mouse button click.

RightClickHold=Duration
Performs a right mouse button click and holds it for the specified duration in milliseconds.

RightClickHoldAsync=Duration
Asynchronously performs a right mouse button click and holds it for the specified duration in milliseconds.

PlaySoundClip=filename.wav
Plays the specified sound file. Files MUST be stored in the 'Sound Clips' folder.

PlaySoundClipAsync=filename.wav
Asynchronously plays the specified sound file. Files MUST be stored in the 'Sound Clips' folder.

Delay=Duration
Pauses execution for the specified duration in milliseconds.

MuteVolume=Duration
Mutes windows for a specified duration in milliseconds.

Key Code Table:
A, B, C, D, E, F, G, H, I, J
K, L, M, N, O, P, Q, R, S, T
U, V, W, X, Y, Z, 0, 1, 2, 3
4, 5, 6, 7, 8, 9, F1, F2, F3, F4
F5, F6, F7, F8, F9, F10, F11, F12, ESC, TAB
ENTER, SHIFT, CTRL, ALT, CAPSLOCK, SPACE, PAGEUP, PAGEDOWN
END, HOME, LEFT, UP, RIGHT, DOWN, PRINTSCREEN, INSERT, DELETE
WIN, NUMLOCK, SCROLLLOCK, NUMPAD0, NUMPAD1, NUMPAD2, NUMPAD3, NUMPAD4
NUMPAD5, NUMPAD6, NUMPAD7, NUMPAD8, NUMPAD9, NUMPADADD, NUMPADSUBTRACT
NUMPADMULTIPLY, NUMPADDIVIDE</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox4.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AABAIQMAAAoZAABQyAAAgEIGAAAUMgAAoJABAACFDAAAKGQAAEAhAwAAChkAAFDIAACAQgYAABQyAACg
        kAEAAIUMAAAoZAAAQCEDAAAKGQAAUMgAAIBCBgAAFDIAAKCQAQAAhQwAAChkAABAIQMAAAoZAABQyAAA
        gEIGAAAUMgAAoJABAACFDAAAKGQAAEAhAwAAChkAAFDIAACAQgYAABQyAACgkAEAAIUMAAAoZAAAQCED
        AAAKGQAAUMgAAIBCBgAAFDIAAKCQAQAAhQwAAChkAABAIQMAAAoZAABQyAAAgEIGAAAUMgAAoJABAACF
        DAAAKGQAAEAhAwAAChkAAFDIAACAQgYAABQyAACgkAEAAIUMAAAoZAAAQCEDAAAKGQAAUMgAAIBCBgAA
        FDIAAKCQAQAAhQwAAChkAABAIQMAAAoZAABQyAAAgEIGAAAUMgAAoJABAACFDAAAKGQAAEAhAwAAChkA
        AFDIAACAQgYAABQyAACgkAEAAIUMAAAoZAAAQCEDAAAKGQAAUMgAAIBCBgAAFDIAAKCQAQAAhQwAAChk
        AABAIQMAAAoZAABQyAAAgEIGAAAUMgAAoJABAACFDAAAKGQAAEAhAwAAChkAAFDIAACAQgYAABQyAACg
        kAEAAIUMAAAoZAAAQCEDAAAKGQAAUMgAAIBCBgAAFDIAAKCQAQAAhQwAAChkAABAIQMAAAoZAABQyAAA
        gEIGAAAUMgAAoJABAACFDAAAKGQAAEAhAwAAChkAAFDIAACAQgYAABQyAACgkAEAAIUMAAAoZAAAQCED
        AAAKGQAAUMgAAIBCBgAAFDIAAKCQAQAAhQwAAChkAABAIQMAAAoZAABQyAAAgEIGAAAUMgAAoJABAACF
        DAAAKGQAAEAhAwAAChkAAFDIAACAQgYAABQyAACgkAEAAIUMAAAoZAAAQCEDAAAKGQAAUMgAAIBCBgAA
        FDIAAKCQAQAAhQwAAChkAABAIQMAAAoZAABQyAAAgEIGAAAUMgAAoJABAACFDAAAKGQAAEAhAwAAChkA
        AFDIAACAQgYAABQyAACgkAEAAIUMAAAoZAAAQCEDAAAKGQAAUMgAAIBCBgAAFDIAAKCQAQAAhQwAAChk
        AABAIQMAAAoZAABQyAAAgEIGAAAUMgAAoJABAACFDAAAKGQAAEAhAwAAChkAAFDIAACAQgYAABQyAACg
        kAEAAIUMAAAoZAAAQCEDAAAKGQAAUMgAAIBCBgAAFDIAAKCQAQAAhQwAAChkAABAIQMAAAoZAABQyAAA
        gEIGAAAUMgAAoJABAACFDAAAKGQAAEAhAwAAChkAAFDIAACAQgYAABQyAACgkAEAAIUMAAAoZAAAQCED
        AAAKGQAAUMgAAIBCBgAAFDIAAKCQAQAAhQwAAChkAABAIQMAAAoZAABQyAAAgEIGAAAUMgAAoJABAACF
        DAAAKPTrd9I/AABn+m/5/076RwDgTFP/BgAANJn6NwAAoMnUvwEAAE2m/g0AAGgy9W8AAECTqf+3pAMA
        gLNM7b8nHQQAnGVq/z3pIADgLFP770kHAQBnmdp/TzoIADjL1P7HpAMBgDNM3f+ZdDAAcIap+z+TDgYA
        zjB1/2fSwQDAGabuc9IHAIC9Tc3/PelDAMDepub/nvQhAGBvU/OfJ30QANjT1PvXSR8GAPY09f510ocB
        gD1NvX+d9GEAYE9T77clnQAA2MvU+u1JJwEA9jK1fnvSSQCAvUytfy/pRADAHqbOv590MgBgD1Pn3086
        GQCwh6nz+5JOCACsbWr8/qSTAgBrmxr/WdKJAYA1TX3/POnkAMCapr5/nnRyAGBNU9+PSboAALCWqe3H
        JV0EAFjL1PZjky4EAKxh6vrxSRcDANYwdf2cpAsCAK81Nf28pIsCAK81Nf3cpAsDAK8x9fz8pIsDAK8x
        9XxN0g0AANeaWr4u6SYAgGtNLV+bdCMAwDWmjq9PuhkA4BpTx69JuiEA4Lmmhl+XdFMAwHNNDb826cYA
        gOeY+l0j6QYBgMea2l0n6SYBgMea2l0r6UYBgMeYul0v6WYBgMeYul0z6YYBgJ+Zml076cYBgPtMva6f
        dPMAwH2mXvdIegAA4HumVvdKehAA4DZTp/slPQwAcJup0z2THggA+NzU6N5JDwYAZFOfZyQ9IADw0dTm
        OUkPCQB8NLV5VtKDAgBvpi7PTHpgAGg3NXl20oMDQKupx46kFwAAbaYWe5JeAgC0mVrsSnoRANBi6rAz
        6YUAwOmmBruTXgwAnGrqT34nvSAAOM3Unvxv0osCgFNM3UlKemEAsLupOfks6cUBwK6m3uSWpBcIALuZ
        WpPvJL1IANjF1Jnck/RCAWB1U2Pyk6QXCwCrmvqSRyS9YABYzdSWPDLpRQPAKqau5FlJLx0AXmXqSa5I
        +gIA4GpTS3Jl0hcBAFeZOpJXJH0hAPBsU0Py6qQvBwAebWpHVkr6ogDgUaZuZMWkLwwAfmpqRlZP+vIA
        4LumVmSnpC8SAG41dSK7Jn2pAPA3Ux9yQtIXDAD/b2pDTkv6sgFgakJOT/ryAegztSBNSX8IAPSYOpDW
        pD8KAM41P/8ib0l/JACcY37uRXLSHw0A+5qfd5Hbkv6IANjH/JyL3Jf0RwXAuubnW+QxSX9kAKxjfq5F
        npP0RwfA68zPs8h1SX+IADzf/AyLvDbpjxOAx5ufXZH1kv5gAbjf/LyK7JP0hwzA1+ZnVOSMpD9yABS+
        FCX9BwBoMj+HIt1J/zkATjI/dyLyVdJ/IIAdzM+YiDw66T8cwJXm50i2y69f/wEYbI1KFmRmKQAAAABJ
        RU5ErkJggg==
</value>
  </data>
</root>