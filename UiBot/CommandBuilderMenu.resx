<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>
To use commands, either type the command function along with the appropriate modifiers, or use the buttons to quickly add the functions. If you are using the buttons make sure you have something set in the text fields beside the buttons. For example, HoldKey=F(1000). You can separate multiple functions with a comma (,) or a space. Commands can be chained together to run in series. For complex operations that require simultaneous execution, use the asynchronous (Async) commands. For instance, HoldKeyAsync=K(1000) TurnMouseAsync=L(1000, 20) will hold the K button and turn the mouse at the same time. Key codes available below the Commands

Commands:
HoldKey=KEY(Duration)
Holds the specified key for the duration in milliseconds.

HoldKeyAsync=KEY(Duration)
Asynchronously holds the specified key for the duration in milliseconds.

HitKey=KEY
Presses the specified key once.

HitKeyAsync=KEY
Asynchronously presses the specified key once.

TurnMouse=Direction(Duration,Speed)
Moves the mouse in the specified direction for the given duration and speed. Directions: U (Up), D (Down), L (Left), R (Right), RAND(Right or Left).

TurnMouseAsync=Direction(Duration,Speed)
Asynchronously moves the mouse in the specified direction for the given duration and speed. Directions: U (Up), D (Down), L (Left), R (Right), RAND(Right or Left).

LeftClick
Performs a left mouse button click.

LeftClickAsync
Asynchronously performs a left mouse button click.

LeftClickHold=Duration
Performs a left mouse button click and holds it for the specified duration in milliseconds.

LeftClickHoldAsync=Duration
Asynchronously performs a left mouse button click and holds it for the specified duration in milliseconds.

RightClick
Performs a right mouse button click.

RightClickAsync
Asynchronously performs a right mouse button click.

RightClickHold=Duration
Performs a right mouse button click and holds it for the specified duration in milliseconds.

RightClickHoldAsync=Duration
Asynchronously performs a right mouse button click and holds it for the specified duration in milliseconds.

PlaySoundClip=filename.wav
Plays the specified sound file. Files MUST be stored in the 'Sound Clips' folder.

PlaySoundClipAsync=filename.wav
Asynchronously plays the specified sound file. Files MUST be stored in the 'Sound Clips' folder.

Delay=Duration
Pauses execution for the specified duration in milliseconds.

MuteVolume=Duration
Mutes windows for a specified duration in milliseconds.

Key Code Table:
A, B, C, D, E, F, G, H, I, J
K, L, M, N, O, P, Q, R, S, T
U, V, W, X, Y, Z, 0, 1, 2, 3
4, 5, 6, 7, 8, 9, F1, F2, F3, F4
F5, F6, F7, F8, F9, F10, F11, F12, ESC, TAB
ENTER, SHIFT, CTRL, ALT, CAPSLOCK, SPACE, PAGEUP, PAGEDOWN
END, HOME, LEFT, UP, RIGHT, DOWN, PRINTSCREEN, INSERT, DELETE
WIN, NUMLOCK, SCROLLLOCK, NUMPAD0, NUMPAD1, NUMPAD2, NUMPAD3, NUMPAD4
NUMPAD5, NUMPAD6, NUMPAD7, NUMPAD8, NUMPAD9, NUMPADADD, NUMPADSUBTRACT
NUMPADMULTIPLY, NUMPADDIVIDE
</value>
  </data>
</root>